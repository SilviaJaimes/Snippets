{
	"crecion del api controller": {
		"prefix": "base-controller",
		"body": [
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace Api.Controllers;",
			"",
			"[ApiController]",
			"[Route(\"api/[controller]\")]",
			"public class ApiBaseController : ControllerBase",
			"{",
			"    ",
			"}"
		],
		"description": "crecion del api controller"
	},
	"crecion de controllers": {
		"prefix": "ejemplo-controller",
		"body": [
			"public class UserController : ApiBaseController",
			"{",
			"    private readonly IUserService _userService;",
			"    public UserController(IUserService userService)",
			"    {",
			"            _userService = userService;",
			"    }",
			"",
			"    [HttpPost(\"register\")]",
			"    public async Task<ActionResult> RegisterAsync(RegisterDto model)",
			"    {",
			"        var result = await _userService.RegisterAsync(model);",
			"        return Ok(result);",
			"    }",
			"",
			"    [HttpPost(\"token\")]",
			"    public async Task<IActionResult> GetTokenAsync(LoginDto model)",
			"    {",
			"        var result = await _userService.GetTokenAsync(model);",
			"        return Ok(result);",
			"    }",
			"",
			"    [HttpPost(\"addrole\")]",
			"    public async Task<IActionResult> AddRoleAsync(AddRoleDto model)",
			"    {",
			"        var result = await _userService.AddRoleAsync(model);",
			"        return Ok(result);",
			"    }",
			"}"
		],
		"description": "crecion de controllers"
	},
	"configuracion de los cors": {
		"prefix": "cors",
		"body": [
			"public static void ConfigureCors(this IServiceCollection services) => services.AddCors(options => ",
			"    {",
			"        options.AddPolicy(\"CorsPolicy\", builder =>",
			"            builder.AllowAnyOrigin()",
			"            .AllowAnyMethod()",
			"            .AllowAnyHeader());",
			"    });"
		],
		"description": "configuracion de los cors"
	},
	"añadir la aplicacion de servicios": {
		"prefix": "aplicacion-servicios",
		"body": [
			"public static void AddAplicacionServices(this IServiceCollection services)",
			"    {",
			"        //Services.AddScoped<IpaisInterface,PaisRepository>();",
			"        //Services.AddScoped<ITipoPersona,TipoPeronsaRepository>();",
			"",
			"        services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();",
			"        services.AddScoped<IUserService, UserService>();",
			"        services.AddScoped<IUnitOfWork, UnitOfWork>();",
			"        services.AddScoped<IAuthorizationHandler, GlobalVerbRoleHandler>();",
			"    }"
		],
		"description": "añadir la aplicacion de servicios"
	},
	"configuracion del rate limit": {
		"prefix": "rate-limit",
		"body": [
			" public static void ConfigureRateLimit(this IServiceCollection services)",
			"    {",
			"        services.AddMemoryCache();",
			"        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
			"        services.AddInMemoryRateLimiting();",
			"        services.Configure<IpRateLimitOptions>(options =>",
			"        {",
			"            options.EnableEndpointRateLimiting = true;",
			"            options.StackBlockedRequests = false;",
			"            options.HttpStatusCode = 429;",
			"            options.RealIpHeader = \"X-Real-IP\";",
			"            options.GeneralRules = new List<RateLimitRule>",
			"            {",
			"                new RateLimitRule",
			"                {",
			"                    Endpoint = \"*\",",
			"                    Period = \"10s\",",
			"                    Limit = 2",
			"                }",
			"            };",
			"        });",
			"    }"
		],
		"description": "configuracion del rate limit"
	},
	"configuracion del versionado": {
		"prefix": "versioning",
		"body": [
			"public static void ConfigureApiVersioning(this IServiceCollection services)",
			"    {",
			"        services.AddApiVersioning(options =>",
			"        {",
			"            options.DefaultApiVersion = new ApiVersion(1, 0);",
			"            options.AssumeDefaultVersionWhenUnspecified = true;",
			"            //Para una versión ",
			"            //options.ApiVersionReader = new QueryStringApiVersionReader(\"ver\");",
			"",
			"            //Para ambas versiones",
			"            options.ApiVersionReader = ApiVersionReader.Combine(",
			"                new QueryStringApiVersionReader(\"ver\"),",
			"                new HeaderApiVersionReader (\"X-Version\")",
			"            );",
			"        });",
			"    }"
		],
		"description": "configuracion del versionado"
	},
	"añadir jwt": {
		"prefix": "add-jwt",
		"body": [
			"public static void AddJwt(this IServiceCollection services, IConfiguration configuration)",
			"    {",
			"        services.Configure<JWT>(configuration.GetSection(\"JWT\"));",
			"",
			"        services.AddAuthentication(options => ",
			"        {",
			"            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;",
			"            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;",
			"        })",
			"            .AddJwtBearer(o => ",
			"            {",
			"                o.RequireHttpsMetadata = false;",
			"                o.SaveToken = false;",
			"                o.TokenValidationParameters = new TokenValidationParameters",
			"                {",
			"                    ValidateIssuerSigningKey = true,",
			"                    ValidateIssuer = true,",
			"                    ValidateAudience = true,",
			"                    ValidateLifetime = true,",
			"                    ClockSkew = TimeSpan.Zero,",
			"                    ValidIssuer = configuration[\"JWT:Issuer\"],",
			"                    ValidAudience = configuration[\"JWT:Audience\"],",
			"                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"JWT:Key\"]))",
			"                };",
			"            });",
			"    }"
		],
		"description": "añadir jwt"
	},
	"global requirement": {
		"prefix": "global-requirement",
		"body": [
			"public class GlobalVerbRoleRequirement : IAuthorizationRequirement",
			"{",
			"    public bool IsAllowed(string role, string verb)",
			"    {",
			"        if(string.Equals(\"Administrador\", role, StringComparison.OrdinalIgnoreCase)) return true;",
			"        if(string.Equals(\"Gerente\", role, StringComparison.OrdinalIgnoreCase)) return true;",
			"",
			"        if(string.Equals(\"Empleado\", role, StringComparison.OrdinalIgnoreCase) && string.Equals(\"GET\", verb, StringComparison.OrdinalIgnoreCase))",
			"        {",
			"            return true;",
			"        }",
			"",
			"        if(string.Equals(\"Camper\", role, StringComparison.OrdinalIgnoreCase) && string.Equals(\"GET\", verb, StringComparison.OrdinalIgnoreCase))",
			"        {",
			"            return true;",
			"        }",
			"",
			"        return false;",
			"    }",
			"}"
		],
		"description": "global requirement"
	},
	"global handler": {
		"prefix": "global-handler",
		"body": [
			"public class GlobalVerbRoleHandler : AuthorizationHandler<GlobalVerbRoleRequirement>",
			"{",
			"    private readonly IHttpContextAccessor _httpContextAccessor;",
			"",
			"    public GlobalVerbRoleHandler(IHttpContextAccessor httpContextAccessor)",
			"    {",
			"        this._httpContextAccessor = httpContextAccessor;",
			"    }",
			"",
			"    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, GlobalVerbRoleRequirement requirement)",
			"    {",
			"        var roles = context.User.FindAll(c => string.Equals(c.Type, ClaimTypes.Role)).Select(c => c.Value);",
			"        var verb = _httpContextAccessor.HttpContext.Request.Method;",
			"",
			"        if(string.IsNullOrEmpty(verb))",
			"        {",
			"            throw new Exception($\"request cann't be null\");",
			"        }",
			"",
			"        foreach(var role in roles)",
			"        {",
			"            if(requirement.IsAllowed(role, verb))",
			"            {",
			"                context.Succeed(requirement);",
			"                return Task.CompletedTask;",
			"            }",
			"        }",
			"        context.Fail();",
			"        return Task.CompletedTask;",
			"    }",
			"}"
		],
		"description": "global handler"
	},
	"jwt helpers": {
		"prefix": "helper-jwt",
		"body": [
			"public class JWT",
			"{",
			"    public string Key { get; set; }",
			"    public string Issuer { get; set; }",
			"    public string Audience { get; set; }",
			"    public double DurationInMinutes { get; set; }",
			"}"
		],
		"description": "jwt helpers"
	},
	"user services": {
		"prefix": "user-service",
		"body": [
			"public class UserService : IUserService",
			"{",
			"    private readonly JWT _jwt;",
			"    private readonly IUnitOfWork _unitOfWork;",
			"    private readonly IPasswordHasher<User> _passwordHasher;",
			"",
			"    public UserService(IUnitOfWork unitOfWork, IOptions<JWT> jwt, IPasswordHasher<User> passwordHasher)",
			"    {",
			"        _jwt = jwt.Value;",
			"        _unitOfWork = unitOfWork;",
			"        _passwordHasher = passwordHasher;",
			"    }",
			"",
			"    public async Task<string> RegisterAsync(RegisterDto registerDto)",
			"    {",
			"        var user = new User",
			"        {",
			"            Email = registerDto.Email,",
			"            UserName = registerDto.UserName,",
			"        };",
			"",
			"        user.Password = _passwordHasher.HashPassword(user, registerDto.Password);",
			"",
			"        var userExiste = _unitOfWork.Users",
			"            .Find(u => u.UserName.ToLower() == registerDto.UserName.ToLower())",
			"            .FirstOrDefault();",
			"",
			"        if (userExiste == null)",
			"        {",
			"            try",
			"            {",
			"                _unitOfWork.Users.Add(user);",
			"                await _unitOfWork.SaveAsync();",
			"",
			"                return $\"El Usuario {registerDto.UserName} ha sido registrado exitosamente\";",
			"            }",
			"            catch (Exception ex)",
			"            {",
			"                var message = ex.Message;",
			"                return $\"Error: {message}\";",
			"            }",
			"        }",
			"        else",
			"        {",
			"            return $\"El usuario con {registerDto.UserName} ya se encuentra resgistrado.\";",
			"        }",
			"    }",
			"",
			"    public async Task<string> AddRoleAsync(AddRoleDto model)",
			"    {",
			"        var user = await _unitOfWork.Users",
			"            .GetByUserNameAsync(model.UserName);",
			"",
			"        if(user == null)",
			"        {",
			"            return $\"No existe algún auduario registrado con la cuenta, ¿olvido algún caracter?{model.UserName}.\";",
			"        }",
			"",
			"        var resultado = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
			"",
			"        if(resultado == PasswordVerificationResult.Success)",
			"        {",
			"            var rolExiste = _unitOfWork.Rols",
			"                .Find(u => u.Nombre.ToLower() == model.Rol.ToLower())",
			"                .FirstOrDefault();",
			"",
			"            if(rolExiste != null)",
			"            {",
			"                var userTieneRol = user.Rols",
			"                    .Any(u => u.Id == rolExiste.Id);",
			"",
			"                if(userTieneRol == false)",
			"                {",
			"                    user.Rols.Add(rolExiste);",
			"                    _unitOfWork.Users.Update(user);",
			"                    await _unitOfWork.SaveAsync();",
			"                }",
			"",
			"                return $\"Rol {model.Rol} agregado a la cuenta {model.UserName} de forma exitosa\";",
			"            }",
			"",
			"            return $\"Rol {model.Rol} no encontrado\";",
			"        }",
			"",
			"        return $\"Credenciales incorrectas para el usuario {user.UserName}\";",
			"    }",
			"",
			"    public async Task<DatosUsuarioDto> GetTokenAsync(LoginDto model)",
			"    {",
			"        DatosUsuarioDto datosUsuarioDto = new DatosUsuarioDto();",
			"        var user = await _unitOfWork.Users",
			"            .GetByUserNameAsync(model.UserName);",
			"",
			"        if(user == null)",
			"        {",
			"            datosUsuarioDto.EstaAutenticado = false;",
			"            datosUsuarioDto.Mensaje = $\"No existe ningún usuario con el username {model.UserName}\";",
			"            return datosUsuarioDto;",
			"        }",
			"",
			"        var result = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
			"",
			"        if(result == PasswordVerificationResult.Success)",
			"        {",
			"            datosUsuarioDto.Mensaje = \"OK\";",
			"            datosUsuarioDto.EstaAutenticado = true;",
			"",
			"            if(user != null)",
			"            {",
			"                JwtSecurityToken jwtSecurityToken = CreateJwtToken(user);",
			"                datosUsuarioDto.Token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);",
			"                datosUsuarioDto.UserName = user.UserName;",
			"                datosUsuarioDto.Email = user.Email;",
			"                datosUsuarioDto.Rols = user.Rols",
			"                    .Select(p => p.Nombre)",
			"                    .ToList();",
			"",
			"                return datosUsuarioDto;",
			"            }",
			"            else",
			"            {",
			"                datosUsuarioDto.EstaAutenticado = false;",
			"                datosUsuarioDto.Mensaje = $\"Credenciales incorrectas para el usuario {user.UserName}\";",
			"",
			"                return datosUsuarioDto;",
			"            }",
			"        }",
			"",
			"        datosUsuarioDto.EstaAutenticado = false;",
			"        datosUsuarioDto.Mensaje = $\"Credenciales incorrectas para el usuario {user.UserName}\";",
			"",
			"        return datosUsuarioDto;",
			"    }",
			"",
			"    private JwtSecurityToken CreateJwtToken(User user)",
			"    {",
			"        if(user == null)",
			"        {",
			"            throw new ArgumentNullException(nameof(user), \"El usuario no puede ser nulo.\");",
			"        }",
			"",
			"        var rols = user.Rols;",
			"        var rolClaims = new List<Claim>();",
			"        foreach(var rol in rols)",
			"        {",
			"            rolClaims.Add(new Claim(\"rols\", rol.Nombre));",
			"        }",
			"",
			"        var claims = new[]",
			"        {",
			"            new Claim(JwtRegisteredClaimNames.Sub, user.UserName),",
			"            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),",
			"            new Claim(\"uid\", user.Id.ToString())",
			"        }",
			"        .Union(rolClaims);",
			"",
			"        if(string.IsNullOrEmpty(_jwt.Key) || string.IsNullOrEmpty(_jwt.Issuer) || string.IsNullOrEmpty(_jwt.Audience))",
			"        {",
			"            throw new ArgumentNullException(\"La configuración del JWT es nula o vacía.\");",
			"        }",
			"",
			"        var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwt.Key));",
			"",
			"        var signingCredentials = new SigningCredentials(symmetricSecurityKey, SecurityAlgorithms.HmacSha256Signature);",
			"",
			"        var JwtSecurityToken = new JwtSecurityToken(",
			"            issuer: _jwt.Issuer,",
			"            audience: _jwt.Audience,",
			"            claims: claims,",
			"            expires: DateTime.UtcNow.AddMinutes(_jwt.DurationInMinutes),",
			"            signingCredentials: signingCredentials);",
			"",
			"        return JwtSecurityToken;",
			"    }",
			"}"
		],
		"description": "user services"
	},
	"interface de user service": {
		"prefix": "i-service",
		"body": [
			"public interface IUserService",
			"{",
			"    Task<string> RegisterAsync(RegisterDto model);",
			"    Task<DatosUsuarioDto> GetTokenAsync(LoginDto model);",
			"    Task<string> AddRoleAsync(AddRoleDto model);",
			"}"
		],
		"description": "interface de user service"
	},
	"dependencias": {
		"prefix": "dependencia-program",
		"body": [
			"builder.Services.AddAuthorization(opts =>",
			"{",
			"    opts.DefaultPolicy = new AuthorizationPolicyBuilder()",
			"         .RequireAuthenticatedUser()",
			"         .AddRequirements(new GlobalVerbRoleRequirement())",
			"         .RequireAuthenticatedUser()",
			"         .Build();",
			"});",
			"builder.Services.AddDbContext<ApiContext>(options =>",
			"{",
			"    string connectionString = builder.Configuration.GetConnectionString(\"ConexMysql\");",
			"    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
			"});"
		],
		"description": "dependencias"
	},
	"mapping-profiles": {
		"prefix": "mapping-profiles",
		"body": [
			"public class MappingProfiles : Profile",
			"{",
			"    public MappingProfiles()",
			"    {",
			"        CreateMap<Pais,PaisDto>().ReverseMap();",
			"        CreateMap<Departamento,DepartamentoDto>().ReverseMap();",
			"        CreateMap<Ciudad,CiudadDto>().ReverseMap();",
			"        CreateMap<Pais, PaisxDepDto>().ReverseMap();",
			"    }",
			"}"
		],
		"description": "mapping-profiles"
	},
	"repositorio generico": {
		"prefix": "repo-gen",
		"body": [
			"public class GenericRepository<T> : IGenericRepo<T> where T : BaseEntity",
			"{",
			"    private readonly ApiContext _context;",
			"",
			"    public GenericRepository(ApiContext context)",
			"    {",
			"        _context = context;",
			"    }",
			"",
			"    public virtual void Add(T entity)",
			"    {",
			"        _context.Set<T>().Add(entity);",
			"    }",
			"",
			"    public virtual void AddRange(IEnumerable<T> entities)",
			"    {",
			"        _context.Set<T>().AddRange(entities);",
			"    }",
			"",
			"    public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
			"    {",
			"        return _context.Set<T>().Where(expression);",
			"    }",
			"",
			"    public virtual async Task<IEnumerable<T>> GetAllAsync()",
			"    {",
			"        return await _context.Set<T>().ToListAsync();",
			"    }",
			"",
			"    public virtual async Task<T> GetByIdAsync(int id)",
			"    {",
			"        return await _context.Set<T>().FindAsync(id);",
			"    }",
			"",
			"    public virtual Task<T> GetByIdAsync(string id)",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"",
			"    public virtual void Remove(T entity)",
			"    {",
			"        _context.Set<T>().Remove(entity);",
			"    }",
			"",
			"    public virtual void RemoveRange(IEnumerable<T> entities)",
			"    {",
			"        _context.Set<T>().RemoveRange(entities);",
			"    }",
			"",
			"    public virtual void Update(T entity)",
			"    {",
			"        _context.Set<T>()",
			"            .Update(entity);",
			"    }",
			"}"
		],
		"description": "repositorio generico"
	},
	"clase repository": {
		"prefix": "clase-repository",
		"body": [
			"public class $1Repository : GenericRepository<$1>, I$1",
			"{",
			"    protected readonly $2 _context;",
			"    ",
			"    public $1Repository($2 context) : base (context)",
			"    {",
			"        _context = context;",
			"    }",
			"",
			"    public override async Task<IEnumerable<$1>> GetAllAsync()",
			"    {",
			"        return await _context.$3",
			"            .Include(p => p.$4)",
			"            .ToListAsync();",
			"    }",
			"",
			"    public override async Task<$1> GetByIdAsync(int id)",
			"    {",
			"        return await _context.$3",
			"        .Include(p => p.$4)",
			"        .FirstOrDefaultAsync(p =>  p.Id == id);",
			"    }",
			"}"
		],
		"description": "clase repository"
	},
	"unidad de trabajo": {
		"prefix": "unit-of-work",
		"body": [
			"public class UnitOfWork : IUnitOfWork, IDisposable",
			"{",
			"    private readonly ApiContext context;",
			"    private UserRepository _users;",
			"    private RolRepository _rols;",
			"",
			"    public UnitOfWork(ApiContext _context)",
			"    {",
			"        context = _context;",
			"    }",
			"    public IUser Users",
			"    {",
			"        get",
			"        {",
			"            if(_users == null){",
			"                _users = new UserRepository(context);",
			"            }",
			"            return _users;",
			"        }",
			"    }",
			"    public IRol Rols",
			"    {",
			"        get",
			"        {",
			"            if(_rols == null){",
			"                _rols = new RolRepository(context);",
			"            }",
			"            return _rols;",
			"        }",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"        context.Dispose();",
			"    }",
			"    public async Task<int> SaveAsync()",
			"    {",
			"        return await context.SaveChangesAsync();",
			"    }",
			"}"
		],
		"description": "unidad de trabajo"
	},
	"interface de unidad de trabajo": {
		"prefix": "inter-unit-of-work",
		"body": [
			"    IUser Users { get; }",
			"    IRol Rols { get; }",
			"    Task<int> SaveAsync();"
		],
		"description": "interface de unidad de trabajo"
	},
	"interface del repositorio generico": {
		"prefix": "inter-repo-gen",
		"body": [
			"public interface IGenericRepo<T> where T : BaseEntity",
			"{",
			"    Task<T> GetByIdAsync(int id);",
			"    Task<IEnumerable<T>> GetAllAsync();",
			"    IEnumerable<T> Find(Expression<Func<T, bool>> expression);",
			"    void Add(T entity);",
			"    void AddRange(IEnumerable<T> entities);",
			"    void Remove(T entity);",
			"    void RemoveRange(IEnumerable<T> entities);",
			"    void Update(T entity);",
			"}"
		],
		"description": "interface del repositorio generico"
	},
	"to table": {
		"prefix": "to-table",
		"body": [
			"builder.ToTable(\"$1\");",
			""
		],
		"description": "to table"
	},
	"propiedad": {
		"prefix": "propiedad",
		"body": [
			"builder.Property(e => e.$1)",
			"        .HasColumnName(\"$2\")",
			"        .HasColumnType(\"varchar\")",
			"        .HasMaxLength(50)",
			"        .IsRequired();",
			""
		],
		"description": "propiedad"
	},
	"conexion tabla compuesta": {
		"prefix": "tabla-compuesta",
		"body": [
			"builder",
			"        .HasMany(p => p.Rols)",
			"        .WithMany(p => p.Users)",
			"        .UsingEntity<UserRol>(",
			"            j => j",
			"                .HasOne(pt => pt.Rol)",
			"                .WithMany(t => t.UsersRols)",
			"                .HasForeignKey(pt => pt.IdRolFk),",
			"            j => j",
			"                .HasOne(pt => pt.User)",
			"                .WithMany(t => t.UsersRols)",
			"                .HasForeignKey(pt => pt.IdUserFk),",
			"            j =>",
			"            {",
			"                j.ToTable(\"userRol\");",
			"                j.HasKey(t => new { t.IdUserFk, t.IdRolFk});",
			"            }",
			"        );"
		],
		"description": "conexion tabla compuesta"
	},
	"uno a muchos": {
		"prefix": "one-to-many",
		"body": [
			"builder.HasOne(d => d.Pais)",
			"        .WithMany(d => d.Departamentos)",
			"        .HasForeignKey(d => d.IdPaisFk);"
		],
		"description": "uno a muchos"
	},
	"db context": {
		"prefix": "api-context",
		"body": [
			"public class ApiContext : DbContext",
			"    {",
			"        public ApiContext(DbContextOptions<ApiContext> options) : base(options)",
			"        {}",
			"",
			"        public DbSet<User> Users { get; set; }",
			"        public DbSet<Rol> Rols { get; set; }",
			"        public DbSet<UserRol> UsersRols { get; set; }",
			"",
			"        protected override void OnModelCreating(ModelBuilder modelBuilder)",
			"        {",
			"            base.OnModelCreating(modelBuilder);",
			"            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
			"        }",
			"    }"
		],
		"description": "db context"
	}
}